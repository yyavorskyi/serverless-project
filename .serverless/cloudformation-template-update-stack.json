{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetDashindexLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/production-ready-serverless-workshop-dev-get-index"
      }
    },
    "GetDashrestaurantsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/production-ready-serverless-workshop-dev-get-restaurants"
      }
    },
    "SearchDashrestaurantsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/production-ready-serverless-workshop-dev-search-restaurants"
      }
    },
    "PlaceDashorderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/production-ready-serverless-workshop-dev-place-order"
      }
    },
    "NotifyDashrestaurantLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/production-ready-serverless-workshop-dev-notify-restaurant"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "production-ready-serverless-workshop",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/production-ready-serverless-workshop-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/production-ready-serverless-workshop-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:scan"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "RestaurantsTable",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:Invoke"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/dev/GET/restaurants"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/production-ready-serverless-workshop/dev/get-restaurants/config"
                    },
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/production-ready-serverless-workshop/dev/search-restaurants/config"
                    },
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/production-ready-serverless-workshop/dev/search-restaurants/secretString"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": "arn:aws:kms:us-east-1:226557936338:key/5a80bdf0-7808-46d9-99d4-b889aa54da9f"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutEvents"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "EventBus",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "RestaurantNotificationTopic"
                  }
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "production-ready-serverless-workshop",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetDashindexLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/production-ready-serverless-workshop/dev/1620906120215-2021-05-13T11:42:00.215Z/production-ready-serverless-workshop.zip"
        },
        "Handler": "functions/get-index.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "production-ready-serverless-workshop-dev-get-index",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "serviceName": "production-ready-serverless-workshop",
            "stage": "dev",
            "restaurants_api": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev/restaurants"
                ]
              ]
            },
            "cognito_user_pool_id": {
              "Ref": "CognitoUserPool"
            },
            "cognito_client_id": {
              "Ref": "WebCognitoUserPoolClient"
            },
            "orders_api": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev/orders"
                ]
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashindexLogGroup"
      ]
    },
    "GetDashrestaurantsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/production-ready-serverless-workshop/dev/1620906120215-2021-05-13T11:42:00.215Z/production-ready-serverless-workshop.zip"
        },
        "Handler": "functions/get-restaurants.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "production-ready-serverless-workshop-dev-get-restaurants",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "serviceName": "production-ready-serverless-workshop",
            "stage": "dev",
            "restaurants_table": {
              "Ref": "RestaurantsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashrestaurantsLogGroup"
      ]
    },
    "SearchDashrestaurantsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/production-ready-serverless-workshop/dev/1620906120215-2021-05-13T11:42:00.215Z/production-ready-serverless-workshop.zip"
        },
        "Handler": "functions/search-restaurants.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "production-ready-serverless-workshop-dev-search-restaurants",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "serviceName": "production-ready-serverless-workshop",
            "stage": "dev",
            "restaurants_table": {
              "Ref": "RestaurantsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SearchDashrestaurantsLogGroup"
      ]
    },
    "PlaceDashorderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/production-ready-serverless-workshop/dev/1620906120215-2021-05-13T11:42:00.215Z/production-ready-serverless-workshop.zip"
        },
        "Handler": "functions/place-order.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "production-ready-serverless-workshop-dev-place-order",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "serviceName": "production-ready-serverless-workshop",
            "stage": "dev",
            "bus_name": {
              "Ref": "EventBus"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PlaceDashorderLogGroup"
      ]
    },
    "NotifyDashrestaurantLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/production-ready-serverless-workshop/dev/1620906120215-2021-05-13T11:42:00.215Z/production-ready-serverless-workshop.zip"
        },
        "Handler": "functions/notify-restaurant.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "production-ready-serverless-workshop-dev-notify-restaurant",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "serviceName": "production-ready-serverless-workshop",
            "stage": "dev",
            "bus_name": {
              "Ref": "EventBus"
            },
            "restaurant_notification_topic": {
              "Ref": "RestaurantNotificationTopic"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "NotifyDashrestaurantLogGroup"
      ]
    },
    "GetDashindexLambdaVersionukoomXN6LdKgX7xjctS4o7agqdbwmfWFYqqrabcs4Z4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashindexLambdaFunction"
        },
        "CodeSha256": "E9prVvP+2T1H2iWBw0EZ11nmlFCneikFYf61D/bYxAc="
      }
    },
    "GetDashrestaurantsLambdaVersioni7ACona2tOfWWukWQodOoBph9UhfoTOOgZHoZ3FxZZY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashrestaurantsLambdaFunction"
        },
        "CodeSha256": "E9prVvP+2T1H2iWBw0EZ11nmlFCneikFYf61D/bYxAc="
      }
    },
    "SearchDashrestaurantsLambdaVersionTwCmxA2E8njQptBZyI2SfY1WnmintZATkN3zIuEHNA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SearchDashrestaurantsLambdaFunction"
        },
        "CodeSha256": "E9prVvP+2T1H2iWBw0EZ11nmlFCneikFYf61D/bYxAc="
      }
    },
    "PlaceDashorderLambdaVersionqBVlc6PBg02Dl2pK0A5ThgGYkQ0EZkUzOx6tLqvhS0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PlaceDashorderLambdaFunction"
        },
        "CodeSha256": "E9prVvP+2T1H2iWBw0EZ11nmlFCneikFYf61D/bYxAc="
      }
    },
    "NotifyDashrestaurantLambdaVersionG3tNu4bXgreYQUsqOMVass7KYbMLJBGmscjZ9isLjDI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotifyDashrestaurantLambdaFunction"
        },
        "CodeSha256": "E9prVvP+2T1H2iWBw0EZ11nmlFCneikFYf61D/bYxAc="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-production-ready-serverless-workshop",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceRestaurants": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "restaurants",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRestaurantsSearch": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceRestaurants"
        },
        "PathPart": "search",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashindexLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodRestaurantsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRestaurants"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashrestaurantsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodRestaurantsSearchPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRestaurantsSearch"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "CognitoAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SearchDashrestaurantsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CognitoAuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodOrdersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "CognitoAuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PlaceDashorderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CognitoAuthorizerApiGatewayAuthorizer"
    },
    "CognitoAuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "CognitoAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          {
            "Fn::GetAtt": [
              "CognitoUserPool",
              "Arn"
            ]
          }
        ]
      }
    },
    "ApiGatewayDeployment1620906101087": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodGet",
        "ApiGatewayMethodRestaurantsGet",
        "ApiGatewayMethodRestaurantsSearchPost",
        "ApiGatewayMethodOrdersPost"
      ]
    },
    "GetDashindexLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashindexLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashrestaurantsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashrestaurantsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SearchDashrestaurantsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SearchDashrestaurantsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PlaceDashorderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PlaceDashorderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "Productionreadyserverlessworkshopdevnotifyrestaurantrule1EventBridgeRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventBusName": {
          "Ref": "EventBus"
        },
        "EventPattern": "{\"source\":[\"big-mouth\"],\"detail-type\":[\"order_placed\"]}",
        "Name": "production-ready-serverle7062818a31114c167ea82b434e6d2bef-rule-1",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "NotifyDashrestaurantLambdaFunction",
                "Arn"
              ]
            },
            "Id": "production-ready-serverledf450fa236a1f9a43ce0f9c55c7dc374-target"
          }
        ]
      }
    },
    "NotifyDashrestaurantEventBridgeLambdaPermission1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "NotifyDashrestaurantLambdaFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn",
              {
                "Ref": "AWS::Partition"
              },
              "events",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              {
                "Fn::Join": [
                  "/",
                  [
                    "rule",
                    {
                      "Ref": "EventBus"
                    },
                    "production-ready-serverle7062818a31114c167ea82b434e6d2bef-rule-1"
                  ]
                ]
              }
            ]
          ]
        }
      }
    },
    "RestaurantsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "name",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "name",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "CognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AliasAttributes": [
          "email"
        ],
        "UsernameConfiguration": {
          "CaseSensitive": false
        },
        "AutoVerifiedAttributes": [
          "email"
        ],
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireUppercase": true,
            "RequireSymbols": true
          }
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "Mutable": true,
            "Name": "given_name",
            "Required": true,
            "StringAttributeConstraints": {
              "MinLength": "1"
            }
          },
          {
            "AttributeDataType": "String",
            "Mutable": true,
            "Name": "family_name",
            "Required": true,
            "StringAttributeConstraints": {
              "MinLength": "1"
            }
          },
          {
            "AttributeDataType": "String",
            "Mutable": true,
            "Name": "email",
            "Required": true,
            "StringAttributeConstraints": {
              "MinLength": "1"
            }
          }
        ]
      }
    },
    "WebCognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "web",
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "ExplicitAuthFlows": [
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "PreventUserExistenceErrors": "ENABLED"
      }
    },
    "ServerCognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "server",
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "ExplicitAuthFlows": [
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "PreventUserExistenceErrors": "ENABLED"
      }
    },
    "ServiceUrlParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": "/production-ready-serverless-workshop/dev/serviceUrl",
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "ApiGatewayRestApi"
              },
              ".execute-api.us-east-1.amazonaws.com/dev"
            ]
          ]
        }
      }
    },
    "EventBus": {
      "Type": "AWS::Events::EventBus",
      "Properties": {
        "Name": "order_events_dev"
      }
    },
    "RestaurantNotificationTopic": {
      "Type": "AWS::SNS::Topic"
    },
    "E2eTestQueue": {
      "Type": "AWS::SQS::Queue",
      "Condition": "IsE2eTest",
      "Properties": {
        "MessageRetentionPeriod": 60,
        "VisibilityTimeout": 1
      }
    },
    "E2eTestQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Condition": "IsE2eTest",
      "Properties": {
        "Queues": [
          {
            "Ref": "E2eTestQueue"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "E2eTestQueue",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "RestaurantNotificationTopic"
                  }
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "E2eTestQueue",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "E2eTestEventBridgeRule",
                      "Arn"
                    ]
                  }
                }
              }
            }
          ]
        }
      }
    },
    "E2eTestSnsSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "IsE2eTest",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "E2eTestQueue",
            "Arn"
          ]
        },
        "RawMessageDelivery": false,
        "Region": "us-east-1",
        "TopicArn": {
          "Ref": "RestaurantNotificationTopic"
        }
      }
    },
    "E2eTestEventBridgeRule": {
      "Type": "AWS::Events::Rule",
      "Condition": "IsE2eTest",
      "Properties": {
        "EventBusName": {
          "Ref": "EventBus"
        },
        "EventPattern": {
          "source": [
            "big-mouth"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "E2eTestQueue",
                "Arn"
              ]
            },
            "Id": "e2eTestQueue",
            "InputTransformer": {
              "InputPathsMap": {
                "source": "$.source",
                "detailType": "$.detail-type",
                "detail": "$.detail"
              },
              "InputTemplate": {
                "Fn::Sub": "{\n  \"event\": {\n    \"source\": <source>,\n    \"detail-type\": <detailType>,\n    \"detail\": <detail>\n  },\n  \"eventBusName\": \"${EventBus}\"\n}\n"
              }
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-production-ready-serverless-workshop-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetDashindexLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashindexLambdaVersionukoomXN6LdKgX7xjctS4o7agqdbwmfWFYqqrabcs4Z4"
      },
      "Export": {
        "Name": "sls-production-ready-serverless-workshop-dev-GetDashindexLambdaFunctionQualifiedArn"
      }
    },
    "GetDashrestaurantsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashrestaurantsLambdaVersioni7ACona2tOfWWukWQodOoBph9UhfoTOOgZHoZ3FxZZY"
      },
      "Export": {
        "Name": "sls-production-ready-serverless-workshop-dev-GetDashrestaurantsLambdaFunctionQualifiedArn"
      }
    },
    "SearchDashrestaurantsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SearchDashrestaurantsLambdaVersionTwCmxA2E8njQptBZyI2SfY1WnmintZATkN3zIuEHNA"
      },
      "Export": {
        "Name": "sls-production-ready-serverless-workshop-dev-SearchDashrestaurantsLambdaFunctionQualifiedArn"
      }
    },
    "PlaceDashorderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PlaceDashorderLambdaVersionqBVlc6PBg02Dl2pK0A5ThgGYkQ0EZkUzOx6tLqvhS0"
      },
      "Export": {
        "Name": "sls-production-ready-serverless-workshop-dev-PlaceDashorderLambdaFunctionQualifiedArn"
      }
    },
    "NotifyDashrestaurantLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotifyDashrestaurantLambdaVersionG3tNu4bXgreYQUsqOMVass7KYbMLJBGmscjZ9isLjDI"
      },
      "Export": {
        "Name": "sls-production-ready-serverless-workshop-dev-NotifyDashrestaurantLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-production-ready-serverless-workshop-dev-ServiceEndpoint"
      }
    },
    "RestApiUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.us-east-1.amazonaws.com/dev"
          ]
        ]
      }
    },
    "RestaurantsTableName": {
      "Value": {
        "Ref": "RestaurantsTable"
      }
    },
    "CognitoUserPoolId": {
      "Value": {
        "Ref": "CognitoUserPool"
      }
    },
    "CognitoUserPoolArn": {
      "Value": {
        "Fn::GetAtt": [
          "CognitoUserPool",
          "Arn"
        ]
      }
    },
    "CognitoUserPoolWebClientId": {
      "Value": {
        "Ref": "WebCognitoUserPoolClient"
      }
    },
    "CognitoUserPoolServerClientId": {
      "Value": {
        "Ref": "ServerCognitoUserPoolClient"
      }
    },
    "EventBusName": {
      "Value": {
        "Ref": "EventBus"
      }
    },
    "RestaurantNotificationTopicName": {
      "Value": {
        "Fn::GetAtt": [
          "RestaurantNotificationTopic",
          "TopicName"
        ]
      }
    },
    "RestaurantNotificationTopicArn": {
      "Value": {
        "Ref": "RestaurantNotificationTopic"
      }
    },
    "E2eTestQueueUrl": {
      "Condition": "IsE2eTest",
      "Value": {
        "Ref": "E2eTestQueue"
      }
    }
  },
  "Conditions": {
    "IsE2eTest": {
      "Fn::Equals": [
        "dev",
        "dev"
      ]
    }
  }
}